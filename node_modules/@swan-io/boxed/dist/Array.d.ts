import { Option } from "./Option";
export declare const from: {
    <T>(arrayLike: ArrayLike<T>): T[];
    <T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
    <T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
    <T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
};
export declare const of: <T>(...items: T[]) => T[];
export declare const isArray: (arg: any) => arg is any[];
export declare const keepMap: <A, B>(array: A[], func: (item: A) => NonNullable<B> | null | undefined) => NonNullable<B>[];
export declare const getBy: <A>(array: A[], func: (item: A) => boolean) => Option<A>;
export declare const getIndexBy: <A>(array: A[], func: (item: A) => boolean) => Option<number>;
export declare const binarySearchBy: <A>(sortedArray: A[], key: A, compare?: <A_1>(a: A_1, b: A_1) => 1 | -1 | 0) => number;
